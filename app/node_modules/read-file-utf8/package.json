{
  "_from": "read-file-utf8",
  "_id": "read-file-utf8@1.1.2",
  "_inBundle": false,
  "_integrity": "sha512-1FtasSguambizhs0FDIGir8w7VcoKnkTHrffFxs3dou8im58jY6CtfG/Hp84CMHI3rnZl3PcrDi7XW8f+kzzNw==",
  "_location": "/read-file-utf8",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "read-file-utf8",
    "fetchSpec": "latest",
    "name": "read-file-utf8",
    "raw": "read-file-utf8",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/read-file-utf8/-/read-file-utf8-1.1.2.tgz",
  "_shasum": "b4c78cf2a064aeb80f423c47835fba90f9be6658",
  "_shrinkwrap": null,
  "_spec": "read-file-utf8",
  "_where": "/home/ares/pm_system",
  "author": {
    "name": "Gianluca Casati",
    "url": "http://g14n.info"
  },
  "bugs": {
    "url": "https://github.com/fibo/read-file-utf8/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "shortcut to fs.readFile or fs.readFileSync",
  "devDependencies": {
    "standa": "^1.0.2"
  },
  "homepage": "http://g14n.info/read-file-utf8",
  "keywords": [
    "fs",
    "utf8"
  ],
  "license": "MIT",
  "main": "read-file-utf8.js",
  "name": "read-file-utf8",
  "optionalDependencies": {},
  "readme": "# read-file-utf8\n\n> shortcut to [fs.readFile][readFile] or [fs.readFileSync][readFileSync]\n\n[API](#api) |\n[Usage](#usage) |\n[Example](#example) |\n[See also](#see-also) |\n[License](#license)\n\n## API\n\n### `readFile(filePath[, callback])`\n\n* **@param** `{String}` filePath\n* **@param** `{Function}` [callback] optionally passed to fs.readFile\n* **@returns** `{String}` content, **only if** callback is not provided\n\n## Usage\n\nGiven a callback to execute on *data*, for instance\n\n```javascript\nfunction callback (err, data) {\n  if (err) throw err\n  console.log(data)\n}\n```\n\nthen, the following code\n\n```javascript\nvar read = require('read-file-utf8')\n\nvar filePath = '/tmp/foo'\n\nread(filePath, callback)\n```\n\nactually is the same as\n\n```javascript\nvar fs = require('fs')\n\nvar filePath = '/tmp/foo'\n\nfs.readFile(filePath, 'utf8', callback)\n```\n\nIf no callback is provided, the synchronous version is used, hence the snippet\n\n```javascript\nvar content = read('/tmp/bar')\n```\n\nis equivalent to\n\n```javascript\nvar content = fs.readFileSync('/tmp/bar', 'utf8')\n```\n\n## Example\n\nSuppose you have some SQL queries. It is really better to put every query\nin its own *queryFile.sql*, instead then inside *someOtherFile.js*.\n\nCreate a *sql/* folder and put there all your queries. Add also a\n*sql/index.js* with the following content\n\n```javascript\nvar path = require('path')\nvar read = require('read-file-utf8')\n\nfunction sql (fileName) {\n  return read(path.join(__dirname, `${fileName}.sql`))\n}\n\nmodule.exports = sql\n```\n\nSuppose there is a *sql/count_winners.sql* file with the following content\n\n```sql\nSELECT COUNT(*) AS num\nFROM foo.contest\nWHERE is_winner IS TRUE\n```\n\nNow you are able to do, for example\n\n```javascript\nvar sql = require('./path/to/sql/')\nvar pg = require('pg')\n\nvar conString = 'your connection string here'\n\npg.connect(conString, function (err, client, done) {\n  if (err) return console.error(err)\n\n  client.query(sql('count_winners'), function (err, result) {\n    if (err) return console.error(err)\n\n    console.log(result.rows[0].num)\n  })\n})\n```\n\n## See also\n\n* [write-file-utf8](http://g14n.info/write-file-utf8)\n* [fs.readFile][readFile]\n* [fs.readFileSync][readFileSync]\n\n## License\n\n[MIT](http://g14n.info/mit-license/)\n\n[readFile]: https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback\n[readFileSync]: https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fibo/read-file-utf8.git"
  },
  "scripts": {
    "lint": "standa",
    "postversion": "git push origin v${npm_package_version}; npm publish; git push origin master",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.2"
}
